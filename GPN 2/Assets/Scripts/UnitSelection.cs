//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/Scripts/UnitSelection.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @UnitSelection : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @UnitSelection()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""UnitSelection"",
    ""maps"": [
        {
            ""name"": ""Input"",
            ""id"": ""c7140b44-066f-4662-ac7b-e3b47a713f56"",
            ""actions"": [
                {
                    ""name"": ""Pos"",
                    ""type"": ""Value"",
                    ""id"": ""088d01a1-6f07-4858-a2a2-03a567a64a3d"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Select"",
                    ""type"": ""Button"",
                    ""id"": ""9bf6fd2e-fe08-4fe9-91ac-82d8de65a580"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""CellSelect"",
                    ""type"": ""Button"",
                    ""id"": ""341c9519-c4ac-42e2-be43-23dd1eb7dd4c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""65f08ab8-84e9-4a12-8270-dffb8fab38bd"",
                    ""path"": ""<Pointer>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pos"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e8ae33e6-d1dd-4c25-a2c2-f4b441657550"",
                    ""path"": ""<Pointer>/press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Select"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f76e5ff7-f839-4cba-94a4-1cc76354591c"",
                    ""path"": ""<Mouse>/middleButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CellSelect"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Input
        m_Input = asset.FindActionMap("Input", throwIfNotFound: true);
        m_Input_Pos = m_Input.FindAction("Pos", throwIfNotFound: true);
        m_Input_Select = m_Input.FindAction("Select", throwIfNotFound: true);
        m_Input_CellSelect = m_Input.FindAction("CellSelect", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Input
    private readonly InputActionMap m_Input;
    private IInputActions m_InputActionsCallbackInterface;
    private readonly InputAction m_Input_Pos;
    private readonly InputAction m_Input_Select;
    private readonly InputAction m_Input_CellSelect;
    public struct InputActions
    {
        private @UnitSelection m_Wrapper;
        public InputActions(@UnitSelection wrapper) { m_Wrapper = wrapper; }
        public InputAction @Pos => m_Wrapper.m_Input_Pos;
        public InputAction @Select => m_Wrapper.m_Input_Select;
        public InputAction @CellSelect => m_Wrapper.m_Input_CellSelect;
        public InputActionMap Get() { return m_Wrapper.m_Input; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(InputActions set) { return set.Get(); }
        public void SetCallbacks(IInputActions instance)
        {
            if (m_Wrapper.m_InputActionsCallbackInterface != null)
            {
                @Pos.started -= m_Wrapper.m_InputActionsCallbackInterface.OnPos;
                @Pos.performed -= m_Wrapper.m_InputActionsCallbackInterface.OnPos;
                @Pos.canceled -= m_Wrapper.m_InputActionsCallbackInterface.OnPos;
                @Select.started -= m_Wrapper.m_InputActionsCallbackInterface.OnSelect;
                @Select.performed -= m_Wrapper.m_InputActionsCallbackInterface.OnSelect;
                @Select.canceled -= m_Wrapper.m_InputActionsCallbackInterface.OnSelect;
                @CellSelect.started -= m_Wrapper.m_InputActionsCallbackInterface.OnCellSelect;
                @CellSelect.performed -= m_Wrapper.m_InputActionsCallbackInterface.OnCellSelect;
                @CellSelect.canceled -= m_Wrapper.m_InputActionsCallbackInterface.OnCellSelect;
            }
            m_Wrapper.m_InputActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Pos.started += instance.OnPos;
                @Pos.performed += instance.OnPos;
                @Pos.canceled += instance.OnPos;
                @Select.started += instance.OnSelect;
                @Select.performed += instance.OnSelect;
                @Select.canceled += instance.OnSelect;
                @CellSelect.started += instance.OnCellSelect;
                @CellSelect.performed += instance.OnCellSelect;
                @CellSelect.canceled += instance.OnCellSelect;
            }
        }
    }
    public InputActions @Input => new InputActions(this);
    public interface IInputActions
    {
        void OnPos(InputAction.CallbackContext context);
        void OnSelect(InputAction.CallbackContext context);
        void OnCellSelect(InputAction.CallbackContext context);
    }
}
